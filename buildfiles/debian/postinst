#!/bin/bash
# postinst script for pi-web-agent
#
# see: dh_installdeb(1)

set -e

APPLICATION_PATH="usr/libexec/pi-web-agent"
SERVICE_PATH="etc/init.d/pi-web-agent"
DEPENDENCIES="git tightvncserver apache2 libapache2-mod-dnssd alsa-utils python gcc libprocps0-dev"
VNC_SERVICE="etc/init.d/vncboot"
ETC_PATH="etc/pi-web-agent"
LOGS=/var/log/pi-web-agent
SHARE="usr/share/pi-web-agent"
PI_UPDATE=usr/bin/pi-update
PI_UPGRADE=usr/bin/pi-upgrade
PI_FIX=usr/bin/pi-fix
APT_QUERY=usr/bin/apt-query
SUDOERS_D=etc/sudoers.d/pi-web-agent
GPIO_QUERY=usr/bin/gpio-query
CRON_JOBS=etc/cron.daily
EXECUTE_BIN=usr/bin/execute-pwa.sh
PI_APT=usr/bin/pi-package-management
htpasswd_PATH=usr/libexec/pi-web-agent/.htpasswd
UPDATE_APP_BIN=usr/bin/pi-web-agent-update
UPDATE_CHECK_PY=usr/bin/update_check.py
OTHER_BINS="usr/bin/start-stream-cam.sh usr/bin/pi-camera-stream.sh"
SYSTEM_UPDATE_CHECK=usr/bin/system_update_check.sh
STARTUP_PWA=usr/bin/startup-manager-pwa.py

CRONJOB_REBOOT=/etc/cron.d/cronpwa

print_ok() {
msg="OK"
[ -n "$1" ] && {
   msg=$1
} 
echo -e "[ \e[1;32m $msg \e[0m ]"

}

print_error() {
    echo -e "[ \e[1;31m $1 \e[0m ]"
}

print_warning() {
   echo -e "[ \e[1;33m $1 \e[0m ]"    
}


this_install(){
	  echo "Post installation actions"
    echo -n "Adding user account for appliance... "
    useradd -r pi-web-agent
    print_ok "DONE"
    sleep 0.5
	/bin/chmod +x /usr/libexec/pi-web-agent/scripts/websocketdBro/raspbian_setup.sh
	/usr/libexec/pi-web-agent/scripts/websocketdBro/raspbian_setup.sh
    [ -f "$htpasswd_PATH" ] || {
         echo -n "Creating password file with default credentials admin:admin "
         htpasswd -cbd "$htpasswd_PATH" 'admin' 'admin' && print_ok "DONE"
    }
    chown pi-web-agent:pi-web-agent /usr/libexec/pi-web-agent/.htpasswd
    chown -R pi-web-agent:pi-web-agent /usr/share/pi-web-agent
    chmod 644 /usr/libexec/pi-web-agent/.htpasswd
    print_ok
    echo "Installing wiringPi - examples excluded"
    currDir=$(pwd)
    temp=$(mktemp -d /tmp/wiringPi.XXX)
    cd $temp
    git clone --depth 1 "https://github.com/vaslabs/gordonsWiringPi"
    cd gordonsWiringPi
    chmod +x ./build
    ./build
    echo "DONE"
    cd $currDir
    rm -rf $temp
    cp $CRON_JOBS/* /$CRON_JOBS
    echo "Registering pi-web-agent in sudoers"
    cp $SUDOERS_D /$SUDOERS_D
    chown root:root /$SUDOERS_D
    chmod 0440 /$SUDOERS_D
    chmod 640 "/usr/libexec/pi-web-agent/.htpasswd"
    chown -R pi-web-agent:pi-web-agent /usr/libexec/pi-web-agent
    chmod 770 /usr/libexec/pi-web-agent/cgi-bin/*.py
    chmod 770 /usr/libexec/pi-web-agent/cgi-bin/*.pwa
    chmod 770 /usr/libexec/pi-web-agent/cgi-bin/toolkit/*.py
    chmod 770 /usr/libexec/pi-web-agent/cgi-bin/toolkit/*.pwa
    chmod 770 /usr/libexec/pi-web-agent/html/utilities/*.html
    chmod 770 /usr/libexec/pi-web-agent/html/index.html
    chmod +x /usr/libexec/pi-web-agent/scripts/hostname.sh
    chmod +x /usr/libexec/pi-web-agent/scripts/memory_information
    chmod +x /etc/cron.daily/update-check
    chmod +x /usr/bin/* 
    mkdir "/$SHARE/camera-media"
    chown -R pi-web-agent:pi-web-agent "/$SHARE/camera-media"
    chown -R pi-web-agent /usr/libexec/pi-web-agent/etc
    chown -R pi-web-agent:pi-web-agent /usr/libexec/pi-webagent/share
    echo "Starting pi-web-agent"
    "/$SERVICE_PATH" start    
}
this_reinstall() {
    echo "Reinstalling pi web agent"
    echo "Keeping the same password"
    echo -e "\e[0;34m Backing up Camera Snapshots\e[0m"
    cp /$htpasswd_PATH $htpasswd_PATH 
    if [ -d "/$SHARE/camera-media" ]; then
    	mv "/$SHARE/camera-media"  /tmp/.
    else
    	print_error "404 Camera snapshots not found"
    fi
    ./pi-web-agent.prerm
    this_install $1
    echo -e "\e[0;34m Restoring Camera Snapshots\e[0m"
    if [ -d "/tmp/camera-media" ]; then
    	cp -af /tmp/camera-media "/$SHARE/"
    	else
    	print_error "Camera snapshots backup not found"
    fi
    echo "Recovering your snapshots"
}

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package


case "$1" in
    configure)
	#if [ -z "$2" ]; then
	#	this_install&&print_ok "INSTALLATION DONE"||print_error "FAILED"
	#else
	this_install&&print_ok "INSTALLATION DONE"||print_error "FAILED"
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
